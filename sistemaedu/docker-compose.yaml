version: "3"
# Inicializamos servicios
services:
  sonarqube:
    image: sonarqube:8.2-community
    expose:
      - 9000
    ports:
      - "127.0.0.1:9000:9000"
    networks:
      - sonarnet
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONARQUBE_JDBC_USERNAME=sonar
      - SONARQUBE_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_conff:/opt/sonarqube/conf
      - sonarqube_dataa:/opt/sonarqube/data
      - sonarqube_extensionss:/opt/sonarqube/extensions
      - sonarqube_bundled-pluginss:/opt/sonarqube/lib/bundled-plugins
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
        reservations:
          cpus: '0.2'
          memory: 200M

  db:
    image: postgres
    networks:
      - sonarnet
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - postgresqll:/var/lib/postgresql
      - postgresql_dataa:/var/lib/postgresql/data

  # Servicio RabbitMQ
  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "5672:5672"   # Puerto AMQP para la comunicación de mensajes
      - "15672:15672" # Puerto HTTP para la interfaz de administración
    networks:
      - sonarnet
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Tu aplicación Java
  app:
    build: .
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq   # Usar el nombre del servicio RabbitMQ
    ports:
      - "8083:8083"   # Puerto de tu aplicación Java (ajústalo según sea necesario)
    networks:
      - sonarnet
    restart: always

networks:
  sonarnet:
    driver: bridge

volumes:
  sonarqube_conff:
  sonarqube_dataa:
  sonarqube_extensionss:
  sonarqube_bundled-pluginss:
  postgresqll:
  postgresql_dataa:
  rabbitmq_data:    # Volumen persistente para RabbitMQ
  jenkins_home:  # Volumen para Jenkins
